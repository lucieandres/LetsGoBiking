//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace test.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeoCoordinate", Namespace="http://schemas.datacontract.org/2004/07/System.Device.Location")]
    [System.SerializableAttribute()]
    public partial class GeoCoordinate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CourseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HorizontalAccuracyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double VerticalAccuracyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Course {
            get {
                return this.CourseField;
            }
            set {
                if ((this.CourseField.Equals(value) != true)) {
                    this.CourseField = value;
                    this.RaisePropertyChanged("Course");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HorizontalAccuracy {
            get {
                return this.HorizontalAccuracyField;
            }
            set {
                if ((this.HorizontalAccuracyField.Equals(value) != true)) {
                    this.HorizontalAccuracyField = value;
                    this.RaisePropertyChanged("HorizontalAccuracy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double VerticalAccuracy {
            get {
                return this.VerticalAccuracyField;
            }
            set {
                if ((this.VerticalAccuracyField.Equals(value) != true)) {
                    this.VerticalAccuracyField = value;
                    this.RaisePropertyChanged("VerticalAccuracy");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ILetsGoBiking")]
    public interface ILetsGoBiking {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILetsGoBiking/GetBikingItinerary", ReplyAction="http://tempuri.org/ILetsGoBiking/GetBikingItineraryResponse")]
        string GetBikingItinerary(test.ServiceReference1.GeoCoordinate originCoordinates, test.ServiceReference1.GeoCoordinate destinationCoordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILetsGoBiking/GetBikingItinerary", ReplyAction="http://tempuri.org/ILetsGoBiking/GetBikingItineraryResponse")]
        System.Threading.Tasks.Task<string> GetBikingItineraryAsync(test.ServiceReference1.GeoCoordinate originCoordinates, test.ServiceReference1.GeoCoordinate destinationCoordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILetsGoBiking/GetCoordinatesFromOpenStreetMap", ReplyAction="http://tempuri.org/ILetsGoBiking/GetCoordinatesFromOpenStreetMapResponse")]
        test.ServiceReference1.GeoCoordinate[] GetCoordinatesFromOpenStreetMap(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILetsGoBiking/GetCoordinatesFromOpenStreetMap", ReplyAction="http://tempuri.org/ILetsGoBiking/GetCoordinatesFromOpenStreetMapResponse")]
        System.Threading.Tasks.Task<test.ServiceReference1.GeoCoordinate[]> GetCoordinatesFromOpenStreetMapAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILetsGoBiking/CheckIfBikeIsWorthUsing", ReplyAction="http://tempuri.org/ILetsGoBiking/CheckIfBikeIsWorthUsingResponse")]
        bool CheckIfBikeIsWorthUsing(test.ServiceReference1.GeoCoordinate originCoordinates, test.ServiceReference1.GeoCoordinate destinationCoordinates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILetsGoBiking/CheckIfBikeIsWorthUsing", ReplyAction="http://tempuri.org/ILetsGoBiking/CheckIfBikeIsWorthUsingResponse")]
        System.Threading.Tasks.Task<bool> CheckIfBikeIsWorthUsingAsync(test.ServiceReference1.GeoCoordinate originCoordinates, test.ServiceReference1.GeoCoordinate destinationCoordinates);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILetsGoBikingChannel : test.ServiceReference1.ILetsGoBiking, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LetsGoBikingClient : System.ServiceModel.ClientBase<test.ServiceReference1.ILetsGoBiking>, test.ServiceReference1.ILetsGoBiking {
        
        public LetsGoBikingClient() {
        }
        
        public LetsGoBikingClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LetsGoBikingClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LetsGoBikingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LetsGoBikingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetBikingItinerary(test.ServiceReference1.GeoCoordinate originCoordinates, test.ServiceReference1.GeoCoordinate destinationCoordinates) {
            return base.Channel.GetBikingItinerary(originCoordinates, destinationCoordinates);
        }
        
        public System.Threading.Tasks.Task<string> GetBikingItineraryAsync(test.ServiceReference1.GeoCoordinate originCoordinates, test.ServiceReference1.GeoCoordinate destinationCoordinates) {
            return base.Channel.GetBikingItineraryAsync(originCoordinates, destinationCoordinates);
        }
        
        public test.ServiceReference1.GeoCoordinate[] GetCoordinatesFromOpenStreetMap(string address) {
            return base.Channel.GetCoordinatesFromOpenStreetMap(address);
        }
        
        public System.Threading.Tasks.Task<test.ServiceReference1.GeoCoordinate[]> GetCoordinatesFromOpenStreetMapAsync(string address) {
            return base.Channel.GetCoordinatesFromOpenStreetMapAsync(address);
        }
        
        public bool CheckIfBikeIsWorthUsing(test.ServiceReference1.GeoCoordinate originCoordinates, test.ServiceReference1.GeoCoordinate destinationCoordinates) {
            return base.Channel.CheckIfBikeIsWorthUsing(originCoordinates, destinationCoordinates);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfBikeIsWorthUsingAsync(test.ServiceReference1.GeoCoordinate originCoordinates, test.ServiceReference1.GeoCoordinate destinationCoordinates) {
            return base.Channel.CheckIfBikeIsWorthUsingAsync(originCoordinates, destinationCoordinates);
        }
    }
}
